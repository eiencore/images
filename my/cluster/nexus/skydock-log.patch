diff --git a/.travis.yml b/.travis.yml
index d76b59b..a1c5e81 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -9,5 +9,4 @@ install:
     - go get github.com/crosbymichael/skydock/docker
     - go get github.com/crosbymichael/skydock/utils
     - go get github.com/influxdb/influxdb/client
-    - go get github.com/crosbymichael/log
     - go get github.com/robertkrimen/otto
diff --git a/docker/client.go b/docker/client.go
index c1d64b4..3ab33a7 100644
--- a/docker/client.go
+++ b/docker/client.go
@@ -12,7 +12,6 @@ import (
 	"os/signal"
 	"syscall"
 
-	"github.com/crosbymichael/log"
 	"github.com/crosbymichael/skydock/utils"
 )
 
@@ -159,20 +158,17 @@ func (d *dockerClient) GetEvents() chan *Event {
 
 		c, err := d.newConn()
 		if err != nil {
-			log.Logf(log.FATAL, "cannot connect to docker: %s", err)
 			return
 		}
 		defer c.Close()
 
 		req, err := http.NewRequest("GET", "/events", nil)
 		if err != nil {
-			log.Logf(log.ERROR, "bad request for events: %s", err)
 			return
 		}
 
 		resp, err := c.Do(req)
 		if err != nil {
-			log.Logf(log.FATAL, "cannot connect to events endpoint: %s", err)
 			return
 		}
 		defer resp.Body.Close()
@@ -181,8 +177,7 @@ func (d *dockerClient) GetEvents() chan *Event {
 		sigChan := make(chan os.Signal, 1)
 		signal.Notify(sigChan, os.Interrupt, syscall.SIGTERM, syscall.SIGQUIT)
 		go func() {
-			for sig := range sigChan {
-				log.Logf(log.INFO, "received signal '%v', exiting", sig)
+			for range sigChan {
 
 				c.Close()
 				close(eventChan)
@@ -197,12 +192,10 @@ func (d *dockerClient) GetEvents() chan *Event {
 				if err == io.EOF {
 					break
 				}
-				log.Logf(log.ERROR, "cannot decode json: %s", err)
 				continue
 			}
 			eventChan <- event
 		}
-		log.Logf(log.DEBUG, "closing event channel")
 	}()
 	return eventChan
 }
diff --git a/main.go b/main.go
index e027f9b..4e7efcf 100644
--- a/main.go
+++ b/main.go
@@ -12,10 +12,8 @@ import (
 	"sync"
 	"time"
 
-	"github.com/crosbymichael/log"
 	"github.com/crosbymichael/skydock/docker"
 	"github.com/crosbymichael/skydock/utils"
-	influxdb "github.com/influxdb/influxdb/client"
 	"github.com/skynetservices/skydns1/client"
 	"github.com/skynetservices/skydns1/msg"
 )
@@ -73,30 +71,6 @@ func validateSettings() {
 }
 
 func setupLogger() error {
-	var (
-		logger log.Logger
-		err    error
-	)
-
-	if host := os.Getenv("INFLUXDB_HOST"); host != "" {
-		config := &influxdb.ClientConfig{
-			Host:     host,
-			Database: os.Getenv("INFLUXDB_DATABASE"),
-			Username: os.Getenv("INFLUXDB_USER"),
-			Password: os.Getenv("INFLUXDB_PASSWORD"),
-		}
-
-		logger, err = log.NewInfluxdbLogger(fmt.Sprintf("%s.%s", environment, domain), "skydock", config)
-		if err != nil {
-			return err
-		}
-	} else {
-		logger = log.NewStandardLevelLogger("skydock")
-	}
-
-	if err := log.SetLogger(logger); err != nil {
-		return err
-	}
 	return nil
 }
 
@@ -119,19 +93,16 @@ func heartbeat(uuid string) {
 	for _ = range time.Tick(time.Duration(beat) * time.Second) {
 		if errorCount > 10 {
 			// if we encountered more than 10 errors just quit
-			log.Logf(log.ERROR, "aborting heartbeat for %s after 10 errors", uuid)
 			return
 		}
 
 		// don't fill logs if we have a low beat
 		// may need to do something better here
 		if beat >= 30 {
-			log.Logf(log.INFO, "updating ttl for %s", uuid)
 		}
 
 		if err := updateService(uuid, ttl); err != nil {
 			errorCount++
-			log.Logf(log.ERROR, "%s", err)
 			break
 		}
 	}
@@ -150,7 +121,6 @@ func restoreContainers() error {
 		uuid := utils.Truncate(cnt.Id)
 		if container, err = dockerClient.FetchContainer(uuid, cnt.Image); err != nil {
 			if err != docker.ErrImageNotTagged {
-				log.Logf(log.ERROR, "failed to fetch %s on restore: %s", cnt.Id, err)
 			}
 			continue
 		}
@@ -162,7 +132,6 @@ func restoreContainers() error {
 			fatal(err)
 		}
 		if err := sendService(uuid, service); err != nil {
-			log.Logf(log.ERROR, "failed to send %s to skydns on restore: %s", uuid, err)
 		}
 	}
 	return nil
@@ -170,13 +139,11 @@ func restoreContainers() error {
 
 // sendService sends the uuid and service data to skydns
 func sendService(uuid string, service *msg.Service) error {
-	log.Logf(log.INFO, "adding %s (%s) to skydns", uuid, service.Name)
 	if err := skydns.Add(uuid, service); err != nil {
 		// ignore erros for conflicting uuids and start the heartbeat again
 		if err != client.ErrConflictingUUID {
 			return err
 		}
-		log.Logf(log.INFO, "service already exists for %s. Resetting ttl.", uuid)
 		updateService(uuid, ttl)
 	}
 	go heartbeat(uuid)
@@ -184,7 +151,6 @@ func sendService(uuid string, service *msg.Service) error {
 }
 
 func removeService(uuid string) error {
-	log.Logf(log.INFO, "removing %s from skydns", uuid)
 	return skydns.Delete(uuid)
 }
 
@@ -218,17 +184,14 @@ func eventHandler(c chan *docker.Event, group *sync.WaitGroup) {
 	defer group.Done()
 
 	for event := range c {
-		log.Logf(log.DEBUG, "received event (%s) %s %s", event.Status, event.ContainerId, event.Image)
 		uuid := utils.Truncate(event.ContainerId)
 
 		switch event.Status {
 		case "die", "stop", "kill":
 			if err := removeService(uuid); err != nil {
-				log.Logf(log.ERROR, "error removing %s from skydns: %s", uuid, err)
 			}
 		case "start", "restart":
 			if err := addService(uuid, event.Image); err != nil {
-				log.Logf(log.ERROR, "error adding %s to skydns: %s", uuid, err)
 			}
 		}
 	}
@@ -257,30 +220,24 @@ func main() {
 	}
 
 	if dockerClient, err = docker.NewClient(pathToSocket); err != nil {
-		log.Logf(log.FATAL, "error connecting to docker: %s", err)
 		fatal(err)
 	}
 
 	if skydnsContainerName != "" {
 		container, err := dockerClient.FetchContainer(skydnsContainerName, "")
 		if err != nil {
-			log.Logf(log.FATAL, "error retrieving skydns container '%s': %s", skydnsContainerName, err)
 			fatal(err)
 		}
 
 		skydnsUrl = "http://" + container.NetworkSettings.IpAddress + ":8080"
 	}
 
-	log.Logf(log.INFO, "skydns URL: %s", skydnsUrl)
 
 	if skydns, err = client.NewClient(skydnsUrl, secret, domain, "172.17.42.1:53"); err != nil {
-		log.Logf(log.FATAL, "error connecting to skydns: %s", err)
 		fatal(err)
 	}
 
-	log.Logf(log.DEBUG, "starting restore of containers")
 	if err := restoreContainers(); err != nil {
-		log.Logf(log.FATAL, "error restoring containers: %s", err)
 		fatal(err)
 	}
 
@@ -292,7 +249,5 @@ func main() {
 		go eventHandler(events, group)
 	}
 
-	log.Logf(log.DEBUG, "starting main process")
 	group.Wait()
-	log.Logf(log.DEBUG, "stopping cleanly via EOF")
 }
diff --git a/plugins.go b/plugins.go
index e90bae4..85749a5 100644
--- a/plugins.go
+++ b/plugins.go
@@ -4,7 +4,6 @@ import (
 	"fmt"
 	"io/ioutil"
 
-	"github.com/crosbymichael/log"
 	"github.com/crosbymichael/skydock/docker"
 	"github.com/crosbymichael/skydock/utils"
 	"github.com/robertkrimen/otto"
@@ -66,7 +65,6 @@ func (r *pluginRuntime) createService(container *docker.Container) (*msg.Service
 
 func newRuntime(file string) (*pluginRuntime, error) {
 	runtime := otto.New()
-	log.Logf(log.INFO, "loading plugins from %s", file)
 
 	content, err := ioutil.ReadFile(file)
 	if err != nil {

#!/bin/sh

name="$1"
if [ -z "$name" ]; then
	echo "empty name"
	exit 1
fi

nexusip=$(docker inspect -f '{{.NetworkSettings.IPAddress}}' $(hostname) 2>/dev/null)

if [ "$name" = "nexus" ]; then
	if [ ! -z "$nexusip" ]; then
		echo "nexus is already running on $(hostname) @ $nexusip"
		exit 1
	fi
	docker run -dit \
		-p 2380:2380 -p 53:53/udp \
		--device /dev/net/tun \
		--cap-add SYS_ADMIN \
		--cap-add NET_ADMIN \
		--cap-add SYS_RESOURCE \
		-v /var/run/docker.sock:/docker.sock \
		-v /usr/bin/docker:/usr/bin/docker \
		-v /sys/fs/cgroup:/sys/fs/cgroup:ro \
		--name $(hostname) \
		-h $(hostname) \
		my/cluster/nexus
	echo "Waiting for nexus"
	while ! docker exec $(hostname) pgrep tincd >/dev/null; do
		echo -n "."
		sleep 1
	done
	echo ""
	echo "nexus started as $(hostname)"
else
	if [ -z "$nexusip" ]; then
		echo "Could not find nexus ip. Is nexus running?"
		exit 1
	fi
	fullname=$(hostname)-$name;
	if docker inspect -f 'yes' $fullname; then
		echo "Container already exists: $fullname"
		exit 1
	fi

	docker run -dit \
		--device /dev/net/tun \
		--cap-add SYS_ADMIN \
		--cap-add NET_ADMIN \
		--cap-add SYS_RESOURCE \
		-e TINC_INVITE=$tincinvite \
		-v /sys/fs/cgroup:/sys/fs/cgroup:ro \
		--name $fullname \
		-h $fullname \
		--add-host nexus:$nexusip \
		my/cluster/node

	echo "Waiting for node"
	tinchost=$(echo $fullname | sed 's/-/_/g')
	tincinvite=$(docker exec $(hostname) tinc -n cluster invite $tinchost)
	echo $tincinvite
	docker exec $fullname tinc -n cluster join $tincinvite
	while ! docker exec $fullname sh -c "test /etc/tinc/cluster/tinc.conf"; do
		sleep 1
	done
	echo ""
	docker exec $fullname sh -c "echo 'Address = nexus' >> /etc/tinc/cluster/hosts/$(hostname)"
	docker exec $fullname systemctl restart clusterinit
	echo "node started as $fullname"
fi
